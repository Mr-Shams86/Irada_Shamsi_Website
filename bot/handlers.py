import httpx

from aiogram import Dispatcher
from aiogram import types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup
from aiogram.types import KeyboardButton

from services.telegram_review_service import upload_telegram_avatar_to_backend


from states import ReviewStates

from bot_instance import bot

from config import BACKEND_URL

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
# –ü–µ—Ä–µ–≤–æ–¥—ã –ø–æ —è–∑—ã–∫–∞–º
LANGUAGES = {
    "ru": {
        "start": "–ü—Ä–∏–≤–µ—Ç üëã! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üí¨üëá",
        "choose_language": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ üåê",
        "leave_feedback": "üí¨ ‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤",
        "restart_bot": "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ë–æ—Ç–∞",
        "start_menu": "üöÄ –°—Ç–∞—Ä—Ç",
        "change_language": "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        "language_selected": "‚úÖ –Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ω!",
        "rating_prompt": "‚≠ê –°–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ —Ç—ã –ø–æ—Å—Ç–∞–≤–∏—à—å? (1-5)",
        "comment_prompt": "üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤!",
        "thank_you": "üëè –°–ø–∞—Å–∏–±–æ! –û—Ç–∑—ã–≤ –∑–∞–ø–∏—Å–∞–Ω! ‚úÖ",
        "error_saving": "üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.",
        "server_error": "üö´ –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç...",
        "invalid_rating": "üëá –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!",
    },
    "en": {
        "start": "Hello üëã! Press the button below to leave a review üí¨üëá",
        "choose_language": "Please, choose a language üåê",
        "leave_feedback": "üí¨ ‚≠ê Share your feedback",
        "restart_bot": "üîÑ Restart Bot",
        "start_menu": "üöÄ Start",
        "change_language": "üåê Change language",
        "language_selected": "‚úÖ Language selected!",
        "rating_prompt": "‚≠ê How many stars would you give? (1-5)",
        "comment_prompt": "üí¨ Please write a few words!",
        "thank_you": "üëè Thank you! Your review has been recorded ‚úÖ",
        "error_saving": "üö´ Error saving your review.",
        "server_error": "üö´ Server is not responding...",
        "invalid_rating": "üëá Please enter a number from 1 to 5!",
    },
    "uz": {
        "start": "Salom üëã! Quyidagi tugmani bosib sharh qoldiring üí¨üëá",
        "choose_language": "Iltimos, tilni tanlang üåê",
        "leave_feedback": "üí¨ ‚≠ê Fikr bildiring",
        "restart_bot": "üîÑ Botni qayta boshlash",
        "start_menu": "üöÄ Start",
        "change_language": "üåê Tilni almashtirish",
        "language_selected": "‚úÖ Til tanlandi!",
        "rating_prompt": "‚≠ê Necha yulduz berasiz? (1-5)",
        "comment_prompt": "üí¨ Iltimos, fikringizni yozing!",
        "thank_you": "üëè Rahmat! Fikringiz yozib olindi ‚úÖ",
        "error_saving": "üö´ Saqlashda xatolik yuz berdi.",
        "server_error": "üö´ Server javob bermayapti...",
        "invalid_rating": "üëá Iltimos, 1 dan 5 gacha bo'lgan raqamni kiriting!",
    },
}


# ================== –§–£–ù–ö–¶–ò–ò ==================


# –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–∫–∞ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ FSM)
async def get_user_lang(state: FSMContext) -> str:
    data = await state.get_data()
    return data.get("lang", "ru")  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_avatar_url(user_id: int) -> str | None:
    try:
        photos = await bot.get_user_profile_photos(user_id, limit=1)
        if photos.total_count == 0:
            return None
        file_id = photos.photos[0][-1].file_id
        file = await bot.get_file(file_id)
        return f"https://api.telegram.org/file/bot{bot.token}/{file.file_path}"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        return None


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(message: types.Message, state: FSMContext):
    lang = await get_user_lang(state)
    buttons = [
        [KeyboardButton(text=LANGUAGES[lang]["leave_feedback"])],
        [KeyboardButton(text=LANGUAGES[lang]["restart_bot"])],
        [KeyboardButton(text=LANGUAGES[lang]["start_menu"])],
        [KeyboardButton(text=LANGUAGES[lang]["change_language"])],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await message.answer(LANGUAGES[lang]["start"], reply_markup=keyboard)


# –°—Ç–∞—Ä—Ç /start
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await state.update_data(lang="ru")
    await show_main_menu(message, state)


# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def restart(message: types.Message, state: FSMContext):
    await state.clear()
    await show_main_menu(message, state)


# –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫
async def choose_language(message: types.Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"),
                KeyboardButton(text="üá¨üáß English"),
                KeyboardButton(text="üá∫üáø O'zbek"),
            ]
        ],
        resize_keyboard=True,
    )
    lang = await get_user_lang(state)
    await message.answer(LANGUAGES[lang]["choose_language"], reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
async def process_language(message: types.Message, state: FSMContext):
    lang_map = {
        "–†—É—Å—Å–∫–∏–π": "ru",
        "English": "en",
        "O'zbek": "uz",
    }
    text = message.text.replace("üá∑üá∫ ", "").replace("üá¨üáß ", "").replace("üá∫üáø ", "")
    lang = lang_map.get(text)

    if lang:
        await state.update_data(lang=lang)
        await message.answer(LANGUAGES[lang]["language_selected"])
        await show_main_menu(message, state)
    else:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")


# –ù–∞–∂–∞–ª –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
async def begin_feedback(message: types.Message, state: FSMContext):
    lang = await get_user_lang(state)
    await message.answer(LANGUAGES[lang]["rating_prompt"])
    await state.set_state(ReviewStates.waiting_for_rating)


# –í–≤–æ–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞
async def process_rating(message: types.Message, state: FSMContext):
    lang = await get_user_lang(state)
    if not message.text.isdigit() or not (1 <= int(message.text) <= 5):
        await message.answer(LANGUAGES[lang]["invalid_rating"])
        return
    await state.update_data(rating=int(message.text))
    await message.answer(LANGUAGES[lang]["comment_prompt"])
    await state.set_state(ReviewStates.waiting_for_comment)


# –í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
async def process_comment(message: types.Message, state: FSMContext):
    lang = await get_user_lang(state)
    user_data = await state.get_data()
    photo_url = None

    # –ü–æ–ª—É—á–∞–µ–º URL –∞–≤–∞—Ç–∞—Ä–∫–∏ Telegram
    try:
        photos = await bot.get_user_profile_photos(
            user_id=message.from_user.id, limit=1
        )
        if photos.total_count > 0:
            file_id = photos.photos[0][-1].file_id
            file = await bot.get_file(file_id)
            photo_url = await upload_telegram_avatar_to_backend(
                telegram_id=message.from_user.id, file_path=file.file_path
            )
    except Exception as e:
        print(f"[AVATAR ERROR] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤—ã –Ω–∞ backend: {e}")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –∏ –æ—á–∏—â–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    text = message.text.strip() if message.text else ""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á—Ç–æ-—Ç–æ –≤–≤—ë–ª (–≤–∫–ª—é—á–∞—è —ç–º–æ–¥–∑–∏)
    if not text:
        await message.answer(LANGUAGES[lang]["comment_prompt"])
        return

    data = {
        "telegram_id": message.from_user.id,
        "username": message.from_user.username,
        "full_name": message.from_user.full_name,
        "photo_url": photo_url,
        "rating": user_data["rating"],
        "message": message.text,
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{BACKEND_URL}/api/telegram-reviews/", json=data
            )
        if response.status_code == 200:
            await message.answer(LANGUAGES[lang]["thank_you"])
        else:
            await message.answer(LANGUAGES[lang]["error_saving"])
    except Exception as e:
        print(f"[BOT ERROR]: {e}")
        await message.answer(LANGUAGES[lang]["server_error"])

    await show_main_menu(message, state)


# ================== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ==================
def register_handlers(dp: Dispatcher):
    dp.message.register(start, CommandStart())
    dp.message.register(restart, lambda m: m.text.lower() == "/restart")
    dp.message.register(start, lambda m: m.text.lower() == "/start")
    dp.message.register(
        restart, lambda m: "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å" in m.text or "Restart" in m.text
    )
    dp.message.register(show_main_menu, lambda m: "üöÄ" in m.text)
    dp.message.register(
        choose_language,
        lambda m: any(
            m.text == LANGUAGES[lang]["change_language"] for lang in LANGUAGES
        ),
    )
    dp.message.register(
        process_language,
        lambda m: m.text.startswith("üá∑")
        or m.text.startswith("üá¨")
        or m.text.startswith("üá∫"),
    )
    dp.message.register(
        begin_feedback,
        lambda m: any(
            word in m.text for word in ["–û—Å—Ç–∞–≤–∏—Ç—å", "Share", "Fikr", "üí¨", "‚≠ê"]
        ),
    )
    dp.message.register(process_rating, ReviewStates.waiting_for_rating)
    dp.message.register(process_comment, ReviewStates.waiting_for_comment)
